<?php

namespace Pressman;

/**
 * Class Hw_Monitor_Test
 *
 * @package Hw_Monitor
 */
class Hw_Monitor_Test extends \WP_UnitTestCase {

	/** @var Hw_Monitor|null */
	private $hw_monitor = null;

	public static $filter_input = [
		INPUT_GET    => [],
		INPUT_POST   => [],
		INPUT_SERVER => []
	];

	private function _format_html( $html ) {
		$pattern = [ '/(\t|\n)/', '/\s+/', '/\s\</', '/\>\s/' ];
		$replace = [ '', ' ', '<', '>' ];

		return preg_replace( $pattern, $replace, $html );
	}

	public function setUp() {
		parent::setUp();
		$this->hw_monitor = new Hw_Monitor();
		add_filter( 'locale', function ( $locale ) {
			return 'ja';
		} );
		wp_set_current_user( self::factory()->user->create( [
			'role' => 'administrator',
		] ) );
	}

	public function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub
		self::$filter_input = [
			INPUT_GET    => [],
			INPUT_POST   => [],
			INPUT_SERVER => []
		];
	}

	############################################################################

	/**
	 * @covers Hw_Monitor::run
	 */
	public function test__run() {
		$this->hw_monitor->run();
		$plugin = plugin_basename( plugin_dir_path( __DIR__ ) . 'hw-monitor.php' );

		$this->assertNotFalse( has_action( "activate_{$plugin}", [ $this->hw_monitor, 'activate_plugin_options' ] ) );
		$this->assertNotFalse( has_action( "deactivate_{$plugin}", [ $this->hw_monitor, 'deactivate_plugin_options' ] ) );
		$this->assertNotFalse( has_filter( "plugin_action_links_{$plugin}", [ $this->hw_monitor, 'add_action_links' ] ) );
		$this->assertNotFalse( has_action( 'plugins_loaded', [ $this->hw_monitor, 'load_text_domain' ] ) );
		$this->assertNotFalse( has_action( 'admin_menu', [ $this->hw_monitor, 'admin_menu' ] ) );
		$this->assertNotFalse( has_action( 'wp_ajax_hwm', [ $this->hw_monitor, 'admin_ajax' ] ) );
	}

	/**
	 * @covers Hw_Monitor::activate_plugin_options
	 */
	public function test__activate_plugin_options() {
		/*
		 * - register version
		 * - register options
		*/
		$this->hw_monitor->activate_plugin_options();
		$this->assertEquals( Hw_Monitor::VERSION, get_option( 'hw-monitor_version' ) );
		$this->assertEquals( serialize( [ 'interval' => 2 ] ), get_option( 'hw-monitor_options' ) );

		/*
		 * - update version
		 * - not change options
		 */
		update_option( 'hw-monitor_version', '0.0.1' );
		update_option( 'hw-monitor_options', serialize( [ 'interval' => 3 ] ) );
		$this->hw_monitor->activate_plugin_options();
		$this->assertEquals( Hw_Monitor::VERSION, get_option( 'hw-monitor_version' ) );
		$this->assertEquals( serialize( [ 'interval' => 3 ] ), get_option( 'hw-monitor_options' ) );

		/*
		 * - REregister options
		 */
		delete_option( 'hw-monitor_options' );
		$this->hw_monitor->activate_plugin_options();
		$this->assertEquals( serialize( [ 'interval' => 2 ] ), get_option( 'hw-monitor_options' ) );
	}

	/**
	 * @covers Hw_Monitor::deactivate_plugin_options
	 */
	public function test__deactivate_plugin_options() {
		$this->hw_monitor->activate_plugin_options();
		$this->hw_monitor->deactivate_plugin_options();
		$this->assertEmpty( get_option( 'hw-monitor_version' ) );
		$this->assertEmpty( get_option( 'hw-monitor_options' ) );
	}

	/**
	 * @covers Hw_Monitor::add_action_links
	 */
	public function test__add_action_links() {
		$links    = $this->hw_monitor->add_action_links( [ '<a>dummy</a>' ] );
		$expected = [
			'<a href="tools.php?page=hw-monitor/hw-monitor.php">Display</a>',
			'<a>dummy</a>'
		];

		$this->assertEquals( $expected, $links );
	}

	/**
	 * @covers Hw_Monitor::load_text_domain
	 */
	public function test__load_text_domain() {
		global $l10n;

		$this->hw_monitor->load_text_domain();

		$this->assertTrue( isset( $l10n['hw-monitor'] ) );
		$this->assertEquals( '表示', __( 'Display', 'hw-monitor' ) );
	}

	/**
	 * @covers Hw_Monitor::admin_menu
	 */
	public function test__admin_menu() {
		$this->hw_monitor->admin_menu();
		$slug = ltrim( dirname( __DIR__ ) . '/hw-monitor.php', '/' );
		$this->assertNotEmpty( menu_page_url( $slug, false ) );

	}

	/**
	 * @covers Hw_Monitor::admin_page, Hw_Monitor::admin_page_post_setting
	 */
	public function test__admin_page() {
		// default
		self::$filter_input[ INPUT_GET ]['tab'] = 'monitor';

		$expected = file_get_contents( __DIR__ . '/test__admin_page/page-monitor.html' );
		$expected = $this->_format_html( $expected );
		ob_start();
		$this->hw_monitor->admin_page();
		$actual = ob_get_clean();
		$actual = $this->_format_html( $actual );
		$this->assertEquals( $expected, $actual );

		// setting
		self::$filter_input[ INPUT_GET ]['tab'] = 'setting';

		$expected = file_get_contents( __DIR__ . '/test__admin_page/page-setting.html' );
		$expected = $this->_format_html( $expected );
		ob_start();
		$this->hw_monitor->admin_page();
		$actual = ob_get_clean();
		$actual = $this->_format_html( $actual );
		$this->assertEquals( $expected, $actual );

		// addons
		self::$filter_input[ INPUT_GET ]['tab'] = 'addons';

		$expected = file_get_contents( __DIR__ . '/test__admin_page/page-addons.html' );
		$expected = $this->_format_html( $expected );
		ob_start();
		$this->hw_monitor->admin_page();
		$actual = ob_get_clean();
		$actual = $this->_format_html( $actual );
		$this->assertEquals( $expected, $actual );

		global $wp_settings_errors;
		$wp_settings_errors = [];

		// setting (post, success)
		self::$filter_input[ INPUT_GET ]['tab']               = 'setting';
		self::$filter_input[ INPUT_POST ]['interval']         = '99';
		self::$filter_input[ INPUT_SERVER ]['REQUEST_METHOD'] = 'POST';

		$expected = file_get_contents( __DIR__ . '/test__admin_page/page-setting-post-success.html' );
		$expected = $this->_format_html( $expected );
		ob_start();
		$this->hw_monitor->admin_page();
		$actual = ob_get_clean();
		$actual = $this->_format_html( $actual );
		$this->assertEquals( $expected, $actual );

		$wp_settings_errors = [];
		// setting (post, error)
		self::$filter_input[ INPUT_POST ]['interval'] = '0';

		$expected = file_get_contents( __DIR__ . '/test__admin_page/page-setting-post-error.html' );
		$expected = $this->_format_html( $expected );
		ob_start();
		$this->hw_monitor->admin_page();
		$actual = ob_get_clean();
		$actual = $this->_format_html( $actual );
		$this->assertEquals( $expected, $actual );

	}

	/**
	 * @covers Hw_Monitor::admin_page_post_setting
	 */
	public function test__admin_page_post_setting() {
		self::$filter_input[ INPUT_GET ]['tab']               = 'setting';
		self::$filter_input[ INPUT_POST ]['interval']         = '99';
		self::$filter_input[ INPUT_SERVER ]['REQUEST_METHOD'] = 'POST';

		ob_start();
		$this->hw_monitor->admin_page();
		ob_end_clean();
		$this->assertEquals( serialize( [ 'interval' => '99' ] ), get_option( 'hw-monitor_options' ) );
	}

	/*
	public function test__admin_ajax() {
		$test_data = [
			'foo' => 'FOO',
			'bar' => 'BAR'
		];

		add_filter( 'add_hwm_data', function ( $data ) use ( $test_data ) {
			return $test_data;
		} );

		ob_start();
		$this->hw_monitor->admin_ajax();
		$actual = ob_get_clean();

		$header = "HTTP Header---------\nContent-Type: application/json\n--------------------\n";
		$this->assertEquals($header . json_encode($test_data), $actual);
	}
*/
}

/**
 * Override filter_input() for test.
 *
 * @param int $type
 * @param string $variable_name
 * @param int $filter
 * @param mixed $options
 *
 * @return string
 */
function filter_input( $type, $variable_name, $filter = FILTER_DEFAULT, $options = [] ) {
	return ( isset( Hw_Monitor_Test::$filter_input[ $type ][ $variable_name ] ) ) ? Hw_Monitor_Test::$filter_input[ $type ][ $variable_name ] : null;
}
